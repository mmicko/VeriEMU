#line 1 "V3PreLex_pregen.yy.cpp"

#line 3 "V3PreLex_pregen.yy.cpp"

#define  YY_INT_ALIGNED long int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
#define yy_create_buffer V3PreLex_create_buffer
#define yy_delete_buffer V3PreLex_delete_buffer
#define yy_scan_buffer V3PreLex_scan_buffer
#define yy_scan_string V3PreLex_scan_string
#define yy_scan_bytes V3PreLex_scan_bytes
#define yy_init_buffer V3PreLex_init_buffer
#define yy_flush_buffer V3PreLex_flush_buffer
#define yy_load_buffer_state V3PreLex_load_buffer_state
#define yy_switch_to_buffer V3PreLex_switch_to_buffer
#define yypush_buffer_state V3PreLexpush_buffer_state
#define yypop_buffer_state V3PreLexpop_buffer_state
#define yyensure_buffer_stack V3PreLexensure_buffer_stack
#define yy_flex_debug V3PreLex_flex_debug
#define yyin V3PreLexin
#define yyleng V3PreLexleng
#define yylex V3PreLexlex
#define yylineno V3PreLexlineno
#define yyout V3PreLexout
#define yyrestart V3PreLexrestart
#define yytext V3PreLextext
#define yywrap V3PreLexwrap
#define yyalloc V3PreLexalloc
#define yyrealloc V3PreLexrealloc
#define yyfree V3PreLexfree

/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
#ifdef yy_create_buffer
#define V3PreLex_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer V3PreLex_create_buffer
#endif

#ifdef yy_delete_buffer
#define V3PreLex_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer V3PreLex_delete_buffer
#endif

#ifdef yy_scan_buffer
#define V3PreLex_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer V3PreLex_scan_buffer
#endif

#ifdef yy_scan_string
#define V3PreLex_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string V3PreLex_scan_string
#endif

#ifdef yy_scan_bytes
#define V3PreLex_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes V3PreLex_scan_bytes
#endif

#ifdef yy_init_buffer
#define V3PreLex_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer V3PreLex_init_buffer
#endif

#ifdef yy_flush_buffer
#define V3PreLex_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer V3PreLex_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define V3PreLex_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state V3PreLex_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define V3PreLex_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer V3PreLex_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define V3PreLexpush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state V3PreLexpush_buffer_state
#endif

#ifdef yypop_buffer_state
#define V3PreLexpop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state V3PreLexpop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define V3PreLexensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack V3PreLexensure_buffer_stack
#endif

#ifdef yylex
#define V3PreLexlex_ALREADY_DEFINED
#else
#define yylex V3PreLexlex
#endif

#ifdef yyrestart
#define V3PreLexrestart_ALREADY_DEFINED
#else
#define yyrestart V3PreLexrestart
#endif

#ifdef yylex_init
#define V3PreLexlex_init_ALREADY_DEFINED
#else
#define yylex_init V3PreLexlex_init
#endif

#ifdef yylex_init_extra
#define V3PreLexlex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra V3PreLexlex_init_extra
#endif

#ifdef yylex_destroy
#define V3PreLexlex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy V3PreLexlex_destroy
#endif

#ifdef yyget_debug
#define V3PreLexget_debug_ALREADY_DEFINED
#else
#define yyget_debug V3PreLexget_debug
#endif

#ifdef yyset_debug
#define V3PreLexset_debug_ALREADY_DEFINED
#else
#define yyset_debug V3PreLexset_debug
#endif

#ifdef yyget_extra
#define V3PreLexget_extra_ALREADY_DEFINED
#else
#define yyget_extra V3PreLexget_extra
#endif

#ifdef yyset_extra
#define V3PreLexset_extra_ALREADY_DEFINED
#else
#define yyset_extra V3PreLexset_extra
#endif

#ifdef yyget_in
#define V3PreLexget_in_ALREADY_DEFINED
#else
#define yyget_in V3PreLexget_in
#endif

#ifdef yyset_in
#define V3PreLexset_in_ALREADY_DEFINED
#else
#define yyset_in V3PreLexset_in
#endif

#ifdef yyget_out
#define V3PreLexget_out_ALREADY_DEFINED
#else
#define yyget_out V3PreLexget_out
#endif

#ifdef yyset_out
#define V3PreLexset_out_ALREADY_DEFINED
#else
#define yyset_out V3PreLexset_out
#endif

#ifdef yyget_leng
#define V3PreLexget_leng_ALREADY_DEFINED
#else
#define yyget_leng V3PreLexget_leng
#endif

#ifdef yyget_text
#define V3PreLexget_text_ALREADY_DEFINED
#else
#define yyget_text V3PreLexget_text
#endif

#ifdef yyget_lineno
#define V3PreLexget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno V3PreLexget_lineno
#endif

#ifdef yyset_lineno
#define V3PreLexset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno V3PreLexset_lineno
#endif

#ifdef yywrap
#define V3PreLexwrap_ALREADY_DEFINED
#else
#define yywrap V3PreLexwrap
#endif

/* %endif */

#ifdef yyalloc
#define V3PreLexalloc_ALREADY_DEFINED
#else
#define yyalloc V3PreLexalloc
#endif

#ifdef yyrealloc
#define V3PreLexrealloc_ALREADY_DEFINED
#else
#define yyrealloc V3PreLexrealloc
#endif

#ifdef yyfree
#define V3PreLexfree_ALREADY_DEFINED
#else
#define yyfree V3PreLexfree
#endif

/* %if-c-only */

#ifdef yytext
#define V3PreLextext_ALREADY_DEFINED
#else
#define yytext V3PreLextext
#endif

#ifdef yyleng
#define V3PreLexleng_ALREADY_DEFINED
#else
#define yyleng V3PreLexleng
#endif

#ifdef yyin
#define V3PreLexin_ALREADY_DEFINED
#else
#define yyin V3PreLexin
#endif

#ifdef yyout
#define V3PreLexout_ALREADY_DEFINED
#else
#define yyout V3PreLexout
#endif

#ifdef yy_flex_debug
#define V3PreLex_flex_debug_ALREADY_DEFINED
#else
#define yy_flex_debug V3PreLex_flex_debug
#endif

#ifdef yylineno
#define V3PreLexlineno_ALREADY_DEFINED
#else
#define yylineno V3PreLexlineno
#endif

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
extern FILE *yyin, *yyout;
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */
/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;
/* %ok-for-header */

/* %endif */

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

/* %endif */

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define V3PreLexwrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
//flexfix: #undef yytext_ptr
#endif
#define yytext_ptr yytext

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	(yytext_ptr) -= (yy_more_len); \
	yyleng = (int) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 117
#define YY_END_OF_BUFFER 118
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int32_t yy_accept[365] =
    {   0,
        0,    0,   99,   99,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  118,  116,  113,  109,
      115,  114,   14,  116,  110,  116,  116,  113,  115,  116,
       99,  117,  105,  101,  103,  101,  105,  106,  106,  106,
      104,   17,   15,   17,   21,   16,  117,   46,   45,   46,
       44,   60,   52,   62,   51,   55,   47,   48,   62,   62,
       58,   62,   59,   60,   71,   67,   73,   66,   70,   73,
       73,   73,   79,   77,   79,   79,   78,   79,   35,   32,
       31,   34,   33,   24,   26,   35,   35,   32,   34,   35,

       95,   83,   96,   82,   84,   89,   90,   96,   91,   96,
       87,   88,   96,   41,   40,   41,   43,  117,   38,   37,
       38,   38,  113,  109,    0,  100,   98,  110,    0,  110,
       22,  107,    0,  107,  112,  107,  107,  107,  107,  107,
      113,    0,    0,    0,  107,   99,  101,  103,  101,  102,
        0,  104,   15,    0,   16,   20,   20,   18,   20,   45,
        0,   60,   52,    0,   49,   50,   61,   61,   54,    0,
       57,    0,   71,   67,    0,   63,   65,   72,   72,   69,
        0,   77,    0,   74,   78,    0,   76,    0,   32,   31,
        0,   26,    0,   26,   25,   28,    0,   28,   30,   32,

        0,   28,   95,   83,    0,   80,   81,   86,   92,    0,
       94,   40,    0,   42,   37,    0,    0,    0,   97,    0,
      111,  110,  107,    0,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,    0,  107,    0,   19,    0,    0,
       50,    0,   53,    0,    0,   65,   65,    0,   68,    0,
       75,    0,   27,   28,    0,   28,    0,   28,   28,   81,
       92,    0,   92,    0,    0,  110,  108,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,    0,  107,
       56,   64,    0,   29,   23,   28,   28,   28,   93,   85,
        0,  107,  107,  107,    3,  107,  107,  107,  107,  107,

      107,  107,  107,    0,  107,   28,   28,   28,    0,  107,
      107,  107,    4,    5,   11,    6,  107,  107,  107,    9,
        0,    0,   28,   28,    0,  107,  107,    2,    7,  107,
      107,  107,    0,    0,    1,    0,   28,   28,    0,  107,
      107,    8,  107,  107,    0,   28,   28,    0,   12,   13,
      107,  107,   12,   13,    0,   36,  107,    0,  107,    0,
       10,    0,   39,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    5,    1,    1,    1,    1,
        1,    2,    1,    6,    1,    7,    1,    1,    1,    8,
        9,   10,    1,   11,    1,    1,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,    1,    1,    1,
        1,   14,    1,    1,   15,   15,   15,   15,   16,   17,
       15,   15,   18,   15,   15,   19,   15,   20,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       21,   22,   23,    1,   24,   25,   26,   15,   27,   28,

       29,   30,   15,   15,   31,   15,   15,   32,   15,   33,
       34,   35,   15,   36,   37,   38,   39,   15,   15,   15,
       15,   15,   21,    1,   23,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[40] =
    {   0,
        1,    2,    3,    4,    1,    5,    6,    7,    7,    8,
        9,    8,   10,    1,   11,   11,   11,   11,   11,   11,
        7,    5,    7,   11,   12,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11
    } ;

static const flex_int32_t yy_base[401] =
    {   0,
        0,   38,   40,   42,   45,   48,   63,    0,  102,    0,
       53,  139,  145,  168,  191,  211,  233,    0,  272,  154,
      309,  332,  161,  178,  159,  182,  952, 1047,  949, 1047,
       50, 1047, 1047,   50,  921,    0,  352,  200,  206,  386,
        0, 1047, 1047,  142, 1047,  157,  933, 1047,  184,  932,
        0, 1047, 1047,  195, 1047,    0,  216, 1047, 1047,  202,
     1047,    0, 1047,  208,    0, 1047, 1047, 1047, 1047,  212,
     1047,  224, 1047,  317,    0, 1047,  226,    0, 1047, 1047,
      312,  323, 1047, 1047,  325,  921,    0,  343, 1047,  926,
     1047,  345, 1047, 1047,  902,    0,  344,  357,  360,  364,

        0, 1047,  348,    0, 1047, 1047, 1047, 1047, 1047,  355,
     1047, 1047,  350, 1047, 1047,  375, 1047,    0, 1047, 1047,
      390,  897,  923, 1047,  394, 1047,  397,  899,  895,  894,
     1047,  893,    0,  378, 1047,  380,  387,  397,  335,  391,
      424,  427,  884,  430,  359,    0,  402, 1047,  433, 1047,
      435,    0, 1047,  437,    0, 1047,  440, 1047,  442, 1047,
      444,    0, 1047,  447, 1047,    0, 1047,  454, 1047,  450,
     1047,  890,    0, 1047,  456, 1047,  892, 1047,  459, 1047,
      461, 1047,  463, 1047,    0,  466, 1047,  468,  907, 1047,
      470,  883,  882,  881, 1047,  880,  871,  451, 1047,  475,

      478,  382,    0, 1047,  480, 1047,    0, 1047,  870,  869,
     1047, 1047,  482, 1047, 1047,  484,  856,  487, 1047,  490,
     1047,  863,  862,  842,  839,  479,  472,  470,  480,  474,
      481,  486,  487,  490,  832,  491,  523, 1047,  516,  519,
        0,  526, 1047,  528,  856,  821,  530,  533, 1047,  535,
     1047,  537, 1047,  817,  815,  814,  832,  525,  518,    0,
      786,  785,  780,  798,  775,  777, 1047,  127,  528,  523,
      530,  531,  524,  535,  538,  540,  532,  542,  768,  544,
     1047, 1047,  571, 1047, 1047,  558,  559,  553, 1047, 1047,
      756,  560,  561,  555,  765,  562,  564,  565,  566,  568,

      570,  573,  574,  760,  543,  581,  583,  603,  748,  594,
      595,  587,  758,  757,  658,  657,  588,  589,  596,  599,
      623,  629,  610,  613,  647,  612,  615,  655,  654,  616,
      609,  617,  640,  649, 1047,  652,  624,  633,  640,  635,
      637,  621,  638,  639,  662,  645,  647,  488,  476,  453,
      648,  649,  370,  348,  306,  291,  590,  194,  652,  140,
       34,   13, 1047, 1047,  684,  696,  708,  720,  732,  744,
      756,  768,  775,  787,  795,  807,  810,  812,  823,  835,
      847,  859,  871,  874,  880,  892,  899,  911,  918,  930,
      937,  949,  960,  972,  979,  991, 1003, 1010, 1022, 1034

    } ;

static const flex_int32_t yy_def[401] =
    {   0,
      364,    1,  365,  365,  366,  366,  364,    7,  364,    9,
      367,  367,  368,  368,  369,  369,  364,   17,  364,   19,
      370,  370,  371,  371,  372,  372,  364,  364,  364,  364,
      364,  364,  364,  364,  373,  374,  375,  364,  364,  375,
      376,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      377,  364,  364,  364,  364,  378,  379,  364,  364,  364,
      364,  380,  364,  364,  380,  364,  364,  364,  364,  364,
      364,  381,  364,  380,  382,  364,  364,  382,  364,  364,
      364,  383,  364,  364,  364,  364,  384,  364,  364,  364,
      364,  364,  364,  364,  385,  386,  387,  364,  364,  387,

      388,  364,  364,  388,  364,  364,  364,  364,  364,  364,
      364,  364,  389,  364,  364,  364,  364,  390,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  373,  364,  374,
      364,  391,  392,  391,  364,  391,  391,  391,  391,  391,
      364,  364,  364,  364,  391,  376,  364,  364,  364,  364,
      364,  377,  364,  364,  378,  364,  364,  364,  364,  364,
      364,  380,  364,  364,  364,  393,  364,  364,  364,  364,
      364,  364,  382,  364,  364,  364,  394,  364,  364,  364,
      364,  364,  364,  364,  384,  364,  364,  364,  364,  364,
      364,  385,  364,  386,  364,  395,  396,  395,  364,  364,

      364,  395,  388,  364,  364,  364,  397,  364,  398,  399,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  374,  391,  364,  392,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  364,  391,  364,  364,  364,  364,
      393,  364,  364,  364,  364,  394,  394,  364,  364,  364,
      364,  364,  364,  395,  364,  396,  364,  395,  395,  397,
      398,  364,  399,  364,  364,  374,  364,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  364,  391,
      364,  364,  364,  364,  364,  395,  395,  395,  364,  364,
      364,  391,  391,  391,  391,  391,  391,  391,  391,  391,

      391,  391,  391,  364,  391,  395,  395,  395,  364,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      364,  400,  395,  395,  364,  391,  391,  391,  391,  391,
      391,  391,  400,  400,  364,  400,  395,  395,  364,  391,
      391,  391,  391,  391,  400,  395,  395,  364,  391,  391,
      391,  391,  395,  395,  364,  391,  391,  364,  391,  364,
      391,  364,  364,    0,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364

    } ;

static const flex_int32_t yy_nxt[1087] =
    {   0,
       28,   29,   30,   31,   32,   33,   28,   28,   28,   28,
       28,   34,   28,   28,   35,   35,   35,   35,   35,   35,
       28,   36,   28,   35,   37,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   38,
      363,   39,   42,   42,   42,   42,   44,   45,   46,   44,
       45,   46,  124,  125,   47,   59,   60,   47,  224,  126,
       61,  127,   40,   48,   48,   45,   49,   48,   48,   48,
       48,   48,   50,   48,   48,   51,   48,   51,   51,   51,
       51,   51,   51,   48,   48,   48,   51,   48,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,

       51,   51,   52,   52,   53,   54,   52,   55,   52,   52,
       52,   52,   52,   52,   56,   52,   56,   56,   56,   56,
       56,   56,   52,   57,   52,   56,   52,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   59,   60,  147,  292,  147,   61,   63,   64,   65,
       66,  224,   67,   68,   69,   98,   70,   99,  147,  148,
      149,  120,  121,  115,  116,   71,   72,   73,  362,   74,
       63,   64,   65,   66,  117,   67,   68,   69,  100,   70,
      115,  116,  118,  122,  120,  121,  148,  151,   71,   72,
       73,  117,   74,   76,   77,   78,   79,  153,  154,  118,

       80,  141,   81,  142,  160,  161,  122,  142,  124,  144,
      163,  164,   82,   76,   77,   78,   79,  157,  158,  159,
       80,  165,   81,  166,  143,  168,  169,  170,  174,  175,
      143,  360,   82,   83,   83,   84,   85,   83,   83,   83,
       83,   83,   86,   83,   83,   87,   83,   87,   87,   87,
       87,   87,   87,   83,   88,   83,   87,   83,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   89,   90,   91,   92,   93,   94,   89,   89,
       89,   89,   89,   89,   89,   89,   95,   95,   95,   95,
       95,   95,   89,   96,   89,   95,   97,   95,   95,   95,

       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,  102,  103,  104,  105,  224,  106,  107,  108,  109,
      110,  176,  171,  177,  179,  180,  181,  182,  183,  111,
      108,  112,  358,  113,  102,  103,  104,  105,  172,  106,
      107,  108,  109,  110,  186,  187,  188,  190,  191,  195,
      204,  205,  111,  108,  112,  208,  113,  131,  200,  224,
      142,  142,  190,  201,  206,  197,  207,  198,  199,  195,
      233,  210,  255,  133,  211,  134,  135,  212,  213,  136,
      137,  143,  138,  224,  143,  197,  139,  198,  199,  236,
      140,  131,  215,  216,  255,  202,  124,  125,  218,  219,

      220,  226,  224,  147,  224,  147,  255,  133,  227,  134,
      135,  224,  259,  136,  137,  224,  138,  145,  228,  229,
      139,  224,  230,  234,  140,  141,  231,  142,  142,  232,
      142,  142,  124,  144,  147,  148,  149,  148,  151,  153,
      154,  237,  238,  239,  158,  240,  160,  161,  143,  163,
      164,  143,  169,  170,  143,  242,  243,  244,  174,  175,
      248,  249,  250,  180,  181,  182,  183,  186,  251,  252,
      187,  188,  190,  191,  258,  255,  200,  224,  142,  142,
      190,  201,  204,  205,  212,  213,  215,  216,  218,  219,
      220,  218,  219,  220,  224,  268,  224,  269,  224,  143,

      224,  270,  143,  224,  224,  224,  271,  272,  274,  273,
      224,  224,  276,  275,  224,  224,  355,  278,  238,  239,
      277,  158,  240,  280,  237,  238,  239,  242,  243,  244,
      243,  244,  282,  283,  248,  249,  250,  249,  250,  251,
      252,  286,  255,  287,  322,  293,  322,  224,  224,  255,
      288,  247,  224,  294,  224,  224,  224,  298,  295,  224,
      296,  297,  224,  299,  224,  300,  224,  224,  224,  302,
      303,  301,  305,  282,  283,  306,  307,  255,  310,  224,
      311,  308,  255,  255,  224,  224,  224,  312,  224,  224,
      224,  313,  224,  314,  224,  316,  317,  224,  224,  323,

      315,  319,  324,  320,  322,  255,  322,  255,  318,  326,
      327,  224,  224,  224,  224,  328,  330,  329,  224,  224,
      224,  359,  331,  224,  322,  337,  322,  255,  338,  332,
      334,  335,  336,  224,  255,  340,  224,  255,  341,  224,
      224,  224,  335,  345,  342,  224,  343,  346,  255,  344,
      334,  335,  336,  334,  335,  336,  347,  255,  349,  224,
      350,  224,  224,  224,  335,  345,  351,  352,  353,  255,
      354,  255,  224,  224,  357,  356,  224,  348,  224,  224,
      339,  224,  224,  361,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   43,   43,   43,   43,

       43,   43,   43,   43,   43,   43,   43,   43,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      128,  224,  224,  325,  128,  128,  128,  130,  321,  224,
      309,  130,  130,  130,  130,  130,  130,  130,  130,  132,

      304,  266,  291,  290,  262,  132,  132,  146,  146,  289,
      262,  146,  146,  146,  146,  146,  146,  146,  146,  152,
      152,  155,  155,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  162,  162,  285,  255,  284,
      162,  255,  247,  162,  162,  162,  162,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  173,
      173,  281,  279,  224,  173,  173,  267,  173,  173,  173,
      173,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  185,  185,  192,  224,  266,  265,  192,
      192,  192,  194,  264,  262,  257,  194,  194,  194,  194,

      194,  194,  194,  196,  255,  193,  253,  193,  189,  196,
      196,  203,  203,  247,  245,  235,  203,  224,  222,  221,
      203,  203,  209,  129,  123,  217,  193,  189,  209,  209,
      214,  214,  184,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  223,  150,  150,  129,  223,  223,  223,  225,
      123,  364,  364,  225,  225,  225,  225,  225,  225,  225,
      241,  241,  364,  364,  241,  241,  241,  241,  241,  241,
      241,  241,  246,  246,  364,  364,  246,  246,  246,  246,
      246,  246,  246,  246,  254,  364,  364,  364,  254,  254,
      254,  256,  364,  364,  364,  256,  256,  256,  256,  256,

      256,  256,  256,  260,  260,  364,  364,  260,  260,  260,
      260,  260,  260,  260,  260,  261,  364,  364,  364,  261,
      261,  261,  263,  364,  364,  364,  263,  263,  263,  263,
      263,  263,  263,  263,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,   27,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364
    } ;

static const flex_int32_t yy_chk[1087] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
      362,    2,    3,    3,    4,    4,    5,    5,    5,    6,
        6,    6,   31,   31,    5,   11,   11,    6,  361,   34,
       11,   34,    2,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,   12,   12,   44,  268,   44,   12,   13,   13,   13,
       13,  268,   13,   13,   13,   20,   13,   20,   46,   46,
       46,   25,   25,   23,   23,   13,   13,   13,  360,   13,
       14,   14,   14,   14,   23,   14,   14,   14,   20,   14,
       24,   24,   23,   25,   26,   26,   49,   49,   14,   14,
       14,   24,   14,   15,   15,   15,   15,   54,   54,   24,

       15,   38,   15,   38,   60,   60,   26,   39,   39,   39,
       64,   64,   15,   16,   16,   16,   16,   57,   57,   57,
       16,   70,   16,   70,   38,   72,   72,   72,   77,   77,
       39,  358,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   21,   21,   21,   21,  356,   21,   21,   21,   21,
       21,   81,   74,   81,   82,   82,   82,   85,   85,   21,
       21,   21,  355,   21,   22,   22,   22,   22,   74,   22,
       22,   22,   22,   22,   88,   88,   88,   92,   92,   97,
      103,  103,   22,   22,   22,  113,   22,   37,   98,  139,
       98,   99,   99,   99,  110,   97,  110,   97,   97,  100,
      139,  113,  354,   37,  113,   37,   37,  116,  116,   37,
       37,   98,   37,  145,   99,  100,   37,  100,  100,  145,
       37,   40,  121,  121,  353,  100,  125,  125,  127,  127,

      127,  134,  134,  147,  136,  147,  202,   40,  136,   40,
       40,  137,  202,   40,   40,  140,   40,   40,  137,  137,
       40,  138,  137,  140,   40,  141,  138,  141,  142,  138,
      142,  144,  144,  144,  149,  149,  149,  151,  151,  154,
      154,  157,  157,  157,  159,  159,  161,  161,  141,  164,
      164,  142,  170,  170,  144,  168,  168,  168,  175,  175,
      179,  179,  179,  181,  181,  183,  183,  186,  186,  186,
      188,  188,  191,  191,  198,  198,  200,  350,  200,  201,
      201,  201,  205,  205,  213,  213,  216,  216,  218,  218,
      218,  220,  220,  220,  228,  226,  227,  226,  230,  200,

      349,  227,  201,  226,  229,  231,  228,  229,  231,  230,
      232,  233,  232,  231,  234,  236,  348,  234,  239,  239,
      233,  240,  240,  236,  237,  237,  237,  242,  242,  242,
      244,  244,  247,  247,  248,  248,  248,  250,  250,  252,
      252,  258,  259,  258,  305,  269,  305,  270,  273,  258,
      259,  247,  269,  270,  271,  272,  277,  273,  271,  274,
      271,  272,  275,  274,  276,  275,  278,  305,  280,  277,
      278,  276,  280,  283,  283,  286,  287,  288,  292,  294,
      293,  288,  286,  287,  292,  293,  296,  294,  297,  298,
      299,  296,  300,  297,  301,  299,  300,  302,  303,  306,

      298,  302,  307,  303,  308,  306,  308,  307,  301,  310,
      311,  312,  317,  318,  357,  312,  318,  317,  310,  311,
      319,  357,  319,  320,  321,  323,  321,  308,  324,  320,
      322,  322,  322,  331,  323,  326,  326,  324,  327,  327,
      330,  332,  333,  333,  330,  342,  331,  337,  337,  332,
      334,  334,  334,  336,  336,  336,  338,  338,  340,  340,
      341,  341,  343,  344,  345,  345,  343,  344,  346,  346,
      347,  347,  351,  352,  352,  351,  359,  339,  329,  328,
      325,  316,  315,  359,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  366,  366,  366,  366,

      366,  366,  366,  366,  366,  366,  366,  366,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      373,  314,  313,  309,  373,  373,  373,  374,  304,  295,
      291,  374,  374,  374,  374,  374,  374,  374,  374,  375,

      279,  266,  265,  264,  263,  375,  375,  376,  376,  262,
      261,  376,  376,  376,  376,  376,  376,  376,  376,  377,
      377,  378,  378,  379,  379,  379,  379,  379,  379,  379,
      379,  379,  379,  379,  379,  380,  380,  257,  256,  255,
      380,  254,  246,  380,  380,  380,  380,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  382,
      382,  245,  235,  225,  382,  382,  224,  382,  382,  382,
      382,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  384,  384,  385,  223,  222,  217,  385,
      385,  385,  386,  210,  209,  197,  386,  386,  386,  386,

      386,  386,  386,  387,  196,  194,  193,  192,  189,  387,
      387,  388,  388,  177,  172,  143,  388,  132,  130,  129,
      388,  388,  389,  128,  123,  122,   95,   90,  389,  389,
      390,  390,   86,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  391,   50,   47,   35,  391,  391,  391,  392,
       29,   27,    0,  392,  392,  392,  392,  392,  392,  392,
      393,  393,    0,    0,  393,  393,  393,  393,  393,  393,
      393,  393,  394,  394,    0,    0,  394,  394,  394,  394,
      394,  394,  394,  394,  395,    0,    0,    0,  395,  395,
      395,  396,    0,    0,    0,  396,  396,  396,  396,  396,

      396,  396,  396,  397,  397,    0,    0,  397,  397,  397,
      397,  397,  397,  397,  397,  398,    0,    0,    0,  398,
      398,  398,  399,    0,    0,    0,  399,  399,  399,  399,
      399,  399,  399,  399,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 1;

static const flex_int32_t yy_rule_linenum[117] =
    {   0,
       84,   88,   89,   90,   91,   92,   93,   94,   95,   96,
       97,   98,  102,  108,  110,  111,  112,  113,  114,  115,
      116,  121,  123,  124,  125,  126,  127,  128,  129,  130,
      131,  132,  133,  134,  135,  138,  140,  141,  142,  146,
      147,  148,  149,  153,  154,  156,  159,  160,  161,  162,
      163,  165,  166,  167,  168,  169,  170,  171,  172,  173,
      174,  175,  178,  179,  180,  181,  183,  184,  185,  186,
      187,  188,  189,  194,  195,  196,  198,  200,  201,  205,
      206,  207,  209,  210,  211,  212,  213,  214,  215,  224,
      230,  235,  236,  237,  238,  239,  242,  243,  244,  249,

      250,  251,  252,  254,  255,  256,  260,  261,  264,  266,
      267,  268,  269,  270,  271,  272
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "../V3PreLex.l"
#line 6 "../V3PreLex.l"
/**************************************************************************
 * DESCRIPTION: Verilator: Flex verilog preprocessor
 *
 * Code available from: http://www.veripool.org/verilator
 *
 **************************************************************************
 *
 * Copyright 2003-2018 by Wilson Snyder.  This program is free software;
 * you can redistribute it and/or modify it under the terms of either the
 * GNU Lesser General Public License Version 3 or the Perl Artistic License
 * Version 2.0.
 *
 * Verilator is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 **************************************************************************
 * Do not use Flex in C++ mode.  It has bugs with yyunput() which result in
 * lost characters.
 **************************************************************************/

#include "V3PreProc.h"
#include "V3PreLex.h"

V3PreLex* V3PreLex::s_currentLexp = NULL;	// Current lexing point

#define LEXP V3PreLex::s_currentLexp

#define YY_INPUT(buf,result,max_size) \
    result = LEXP->inputToLex(buf,max_size);

// Accessors, because flex keeps changing the type of yyleng
char* yyourtext() { return yytext; }
size_t yyourleng() { return yyleng; }
void yyourtext(const char* textp, size_t size) { yytext=(char*)textp; yyleng=size; }

// Prevent conflicts from perl version
static void linenoInc()  {LEXP->linenoInc();}
static bool pedantic() { return LEXP->m_pedantic; }
static void yyerror(char* msg) { LEXP->curFilelinep()->v3error(msg); }
static void yyerrorf(const char* msg) { LEXP->curFilelinep()->v3error(msg); }
static void appendDefValue(const char* t, size_t l) { LEXP->appendDefValue(t,l); }

/**********************************************************************/
#line 1210 "V3PreLex_pregen.yy.cpp"

/* drop: Drop Ctrl-Z - can't pass thru or may EOF the output too soon */
/* Where we use symb/symbdef, we must also look for a `` join */
/* Note in the preprocessor \ESCaped is *not* always special; mantis1537/bug441 */
#line 81 "../V3PreLex.l"
	/**************************************************************/
#line 1217 "V3PreLex_pregen.yy.cpp"

#define INITIAL 0
#define CMTONEM 1
#define CMTBEGM 2
#define CMTMODE 3
#define STRMODE 4
#define DEFFPAR 5
#define DEFFORM 6
#define DEFVAL 7
#define DEFCMT 8
#define STRIFY 9
#define ARGMODE 10
#define INCMODE 11
#define PRTMODE 12

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */

static int yy_init_globals ( void );

/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

/* %not-for-header */
#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state ( int _new_state );
    
    static void yy_pop_state ( void );
    
    static int yy_top_state ( void );
    
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; ((size_t)n < (size_t)max_size) && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex (void);

#define YY_DECL int yylex (void)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */
#line 82 "../V3PreLex.l"


#line 1525 "V3PreLex_pregen.yy.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (int) ((yy_c_buf_p) - (yytext_ptr));
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 365 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1047 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 117 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 117 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 118 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 84 "../V3PreLex.l"
{ LEXP->lineDirective(yytext);
						  return(VP_LINE); }
	YY_BREAK
/* Special directives we recognize */
case 2:
YY_RULE_SETUP
#line 88 "../V3PreLex.l"
{ return(VP_DEFINE); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 89 "../V3PreLex.l"
{ return(VP_ELSE); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 90 "../V3PreLex.l"
{ return(VP_ELSIF); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 91 "../V3PreLex.l"
{ return(VP_ENDIF); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 92 "../V3PreLex.l"
{ return(VP_IFDEF); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 93 "../V3PreLex.l"
{ return(VP_IFNDEF); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 94 "../V3PreLex.l"
{ return(VP_INCLUDE); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 95 "../V3PreLex.l"
{ return(VP_UNDEF); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 96 "../V3PreLex.l"
{ return(VP_UNDEFINEALL); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 97 "../V3PreLex.l"
{ if (!pedantic()) return (VP_ERROR); else return(VP_DEFREF); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 98 "../V3PreLex.l"
{ static string rtnfile;
			  rtnfile = '"'; rtnfile += LEXP->curFilelinep()->filename();
			  rtnfile += '"'; yytext=(char*)rtnfile.c_str(); yyleng = rtnfile.length();
			  return (VP_STRING); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 102 "../V3PreLex.l"
{ static char buf[10];
			  sprintf(buf, "%d",LEXP->curFilelinep()->lineno());
	                  yytext = buf; yyleng = strlen(yytext);
			  return (VP_TEXT); }
	YY_BREAK
/* Pass-through strings */
case 14:
YY_RULE_SETUP
#line 108 "../V3PreLex.l"
{ yy_push_state(STRMODE); yymore(); }
	YY_BREAK
case YY_STATE_EOF(STRMODE):
#line 109 "../V3PreLex.l"
{ linenoInc(); yyerrorf("EOF in unterminated string"); yyleng=0; yyterminate(); }
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 110 "../V3PreLex.l"
{ linenoInc(); yyerrorf("Unterminated string"); BEGIN(INITIAL); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 111 "../V3PreLex.l"
{ yymore(); }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 112 "../V3PreLex.l"
{ yymore(); }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 113 "../V3PreLex.l"
{ linenoInc(); yymore(); }
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 114 "../V3PreLex.l"
{ yyless(1); LEXP->curFilelinep()->v3warn(BSSPACE, "Backslash followed by whitespace, perhaps the whitespace is accidental?"); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 115 "../V3PreLex.l"
{ yymore(); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 116 "../V3PreLex.l"
{ yy_pop_state();
			  if (LEXP->m_parenLevel || LEXP->m_defQuote) { LEXP->m_defQuote=false; appendDefValue(yytext,yyleng); yyleng=0; }
			  else return (VP_STRING); }
	YY_BREAK
/* Stringification */
case 22:
YY_RULE_SETUP
#line 121 "../V3PreLex.l"
{ yy_push_state(STRIFY); return VP_STRIFY; }
	YY_BREAK
case YY_STATE_EOF(STRIFY):
#line 122 "../V3PreLex.l"
{ linenoInc(); yyerrorf("EOF in unterminated '\""); yyleng=0; yyterminate(); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 123 "../V3PreLex.l"
{ return VP_BACKQUOTE; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 124 "../V3PreLex.l"
{ yy_push_state(STRMODE); yymore(); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 125 "../V3PreLex.l"
{ yy_pop_state(); return VP_STRIFY; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 126 "../V3PreLex.l"
{ return (VP_SYMBOL); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 127 "../V3PreLex.l"
{ yyleng-=2; return (VP_SYMBOL_JOIN); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 128 "../V3PreLex.l"
{ return (VP_DEFREF); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 129 "../V3PreLex.l"
{ yyleng-=2; return (VP_DEFREF_JOIN); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 130 "../V3PreLex.l"
{ yyleng-=2; return (VP_JOIN); }
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 131 "../V3PreLex.l"
{ linenoInc(); yytext=(char*)"\n"; yyleng=1; return(VP_WHITE); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 132 "../V3PreLex.l"
{ return (VP_WHITE); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 133 "../V3PreLex.l"
{ }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 134 "../V3PreLex.l"
{ }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 135 "../V3PreLex.l"
{ return (VP_TEXT); }
	YY_BREAK
/* Protected blocks */
case 36:
YY_RULE_SETUP
#line 138 "../V3PreLex.l"
{ yy_push_state(PRTMODE); yymore(); }
	YY_BREAK
case YY_STATE_EOF(PRTMODE):
#line 139 "../V3PreLex.l"
{ linenoInc(); yyerrorf("EOF in `protected"); yyleng=0; yyterminate(); }
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 140 "../V3PreLex.l"
{ linenoInc(); return VP_TEXT; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 141 "../V3PreLex.l"
{ yymore(); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 142 "../V3PreLex.l"
{ yy_pop_state(); return VP_TEXT; }
	YY_BREAK
/* Pass-through include <> filenames */
case YY_STATE_EOF(INCMODE):
#line 145 "../V3PreLex.l"
{ linenoInc(); yyerrorf("EOF in unterminated include filename"); yyleng=0; yyterminate(); }
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 146 "../V3PreLex.l"
{ linenoInc(); yyerrorf("Unterminated include filename"); BEGIN(INITIAL); }
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 147 "../V3PreLex.l"
{ yymore(); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 148 "../V3PreLex.l"
{ yymore(); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 149 "../V3PreLex.l"
{ yy_pop_state(); return VP_STRING; }
	YY_BREAK
/* Reading definition formal parenthesis (or not) to begin formal arguments */
/* Note '(' must IMMEDIATELY follow definition name */
case 44:
YY_RULE_SETUP
#line 153 "../V3PreLex.l"
{ appendDefValue("(",1); LEXP->m_formalLevel=1; BEGIN(DEFFORM); }
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 154 "../V3PreLex.l"
{ yy_pop_state(); unput('\n'); yyleng=0; return VP_DEFFORM; } /* DEFVAL will later grab the return */
	YY_BREAK
case YY_STATE_EOF(DEFFPAR):
#line 155 "../V3PreLex.l"
{ yy_pop_state(); return VP_DEFFORM; }  /* empty formals */
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 156 "../V3PreLex.l"
{ yy_pop_state(); unput(yytext[yyleng-1]); yyleng=0; return VP_DEFFORM; }  /* empty formals */
	YY_BREAK
/* Reading definition formals (declaration of a define) */
case 47:
YY_RULE_SETUP
#line 159 "../V3PreLex.l"
{ appendDefValue(yytext,yyleng); yyleng=0; ++LEXP->m_formalLevel; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 160 "../V3PreLex.l"
{ appendDefValue(yytext,yyleng); yyleng=0; if ((--LEXP->m_formalLevel)==0) { yy_pop_state(); return VP_DEFFORM; } }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 161 "../V3PreLex.l"
{ yy_push_state(CMTMODE); yymore(); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 162 "../V3PreLex.l"
{ return (VP_COMMENT);}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 163 "../V3PreLex.l"
{ }
	YY_BREAK
case YY_STATE_EOF(DEFFORM):
#line 164 "../V3PreLex.l"
{ linenoInc(); yy_pop_state(); yyerrorf("Unterminated ( in define formal arguments."); yyleng=0; return VP_DEFFORM; }
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 165 "../V3PreLex.l"
{ linenoInc(); appendDefValue((char*)"\n",1); } /* Include return so can maintain output line count */
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 166 "../V3PreLex.l"
{ yyless(1); LEXP->curFilelinep()->v3warn(BSSPACE, "Backslash followed by whitespace, perhaps the whitespace is accidental?"); }
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 167 "../V3PreLex.l"
{ linenoInc(); appendDefValue((char*)"\\\n",2); } /* Include return so can maintain output line count */
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 168 "../V3PreLex.l"
{ LEXP->m_defQuote=true; yy_push_state(STRMODE); yymore(); }  /* Legal only in default values */
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 169 "../V3PreLex.l"
{ appendDefValue(yytext,yyleng); }  /* Maybe illegal, otherwise in default value */
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 170 "../V3PreLex.l"
{ appendDefValue(yytext,yyleng); }  /* Maybe illegal, otherwise in default value */
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 171 "../V3PreLex.l"
{ LEXP->m_formalLevel++; appendDefValue(yytext,yyleng); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 172 "../V3PreLex.l"
{ LEXP->m_formalLevel--; appendDefValue(yytext,yyleng); }
	YY_BREAK
case 60:
#line 174 "../V3PreLex.l"
case 61:
#line 175 "../V3PreLex.l"
case 62:
YY_RULE_SETUP
#line 175 "../V3PreLex.l"
{ appendDefValue(yytext,yyleng); }
	YY_BREAK
/* Reading definition value (declaration of a define's text) */
case 63:
YY_RULE_SETUP
#line 178 "../V3PreLex.l"
{ LEXP->m_defCmtSlash=false; yy_push_state(DEFCMT); yymore(); }  /* Special comment parser */
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 179 "../V3PreLex.l"
{ linenoInc(); appendDefValue((char*)"\n",1); }  /* Spec says // not part of define value */
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 180 "../V3PreLex.l"
{ return (VP_COMMENT);}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 181 "../V3PreLex.l"
{ }
	YY_BREAK
case YY_STATE_EOF(DEFVAL):
#line 182 "../V3PreLex.l"
{ linenoInc(); yy_pop_state(); yytext=(char*)"\n"; yyleng=1; return (VP_DEFVALUE); } /* Technically illegal, but people complained */
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 183 "../V3PreLex.l"
{ linenoInc(); yy_pop_state(); yytext=(char*)"\n"; yyleng=1; return (VP_DEFVALUE); }
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 184 "../V3PreLex.l"
{ yyless(1); LEXP->curFilelinep()->v3warn(BSSPACE, "Backslash followed by whitespace, perhaps the whitespace is accidental?"); }
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 185 "../V3PreLex.l"
{ linenoInc(); appendDefValue((char*)"\\\n",2); } /* Return, AND \ is part of define value */
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 186 "../V3PreLex.l"
{ LEXP->m_defQuote=true; yy_push_state(STRMODE); yymore(); }
	YY_BREAK
case 71:
#line 188 "../V3PreLex.l"
case 72:
#line 189 "../V3PreLex.l"
case 73:
YY_RULE_SETUP
#line 189 "../V3PreLex.l"
{ appendDefValue(yytext,yyleng); }
	YY_BREAK
/* Comments inside define values - if embedded get added to define value per spec */
/* - if no \{crnl} ending then the comment belongs to the next line, as a non-embedded comment */
/* - if all but (say) 3rd line is missing \ then it's indeterminate */
case 74:
YY_RULE_SETUP
#line 194 "../V3PreLex.l"
{ yy_pop_state(); appendDefValue(yytext,yyleng); }
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 195 "../V3PreLex.l"
{ yyless(1); LEXP->curFilelinep()->v3warn(BSSPACE, "Backslash followed by whitespace, perhaps the whitespace is accidental?"); }
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 196 "../V3PreLex.l"
{ linenoInc(); LEXP->m_defCmtSlash=true;
	 		  appendDefValue(yytext,yyleng-2); appendDefValue((char*)"\n",1); }  /* Return but not \ */
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 198 "../V3PreLex.l"
{ linenoInc(); yymore(); if (LEXP->m_defCmtSlash) yyerrorf("One line of /* ... */ is missing \\ before newline");
			  BEGIN(CMTMODE); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 200 "../V3PreLex.l"
{ yymore(); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 201 "../V3PreLex.l"
{ yymore(); }
	YY_BREAK
case YY_STATE_EOF(DEFCMT):
#line 202 "../V3PreLex.l"
{ yyerrorf("EOF in '/* ... */' block comment\n"); yyleng=0; yyterminate(); }
	YY_BREAK
/* Define arguments (use of a define) */
case 80:
YY_RULE_SETUP
#line 205 "../V3PreLex.l"
{ yy_push_state(CMTMODE); yymore(); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 206 "../V3PreLex.l"
{ return (VP_COMMENT);}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 207 "../V3PreLex.l"
{ }
	YY_BREAK
case YY_STATE_EOF(ARGMODE):
#line 208 "../V3PreLex.l"
{ yyerrorf("EOF in define argument list\n"); yyleng = 0; yyterminate(); }
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 209 "../V3PreLex.l"
{ linenoInc(); yytext=(char*)"\n"; yyleng=1; return(VP_WHITE); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 210 "../V3PreLex.l"
{ yy_push_state(STRMODE); yymore(); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 211 "../V3PreLex.l"
{ appendDefValue(yytext,yyleng); }  /* Literal text */
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 212 "../V3PreLex.l"
{ return(VP_STRIFY); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 213 "../V3PreLex.l"
{ LEXP->m_parenLevel++; appendDefValue(yytext,yyleng); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 214 "../V3PreLex.l"
{ LEXP->m_parenLevel--; appendDefValue(yytext,yyleng); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 215 "../V3PreLex.l"
{ LEXP->m_parenLevel++;
			  // Note paren level 0 means before "(" of starting args
			  // Level 1 means "," between arguments
			  // Level 2+ means one inside the () of an argument
			  if (LEXP->m_parenLevel>1) {
			      appendDefValue(yytext,yyleng);
			  } else {
			      return (VP_TEXT);
			}}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 224 "../V3PreLex.l"
{ LEXP->m_parenLevel--;
			  if (LEXP->m_parenLevel>0) {
			      appendDefValue(yytext,yyleng);
			  } else {
			      yy_pop_state(); return (VP_DEFARG);
			}}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 230 "../V3PreLex.l"
{ if (LEXP->m_parenLevel>1) {
			      appendDefValue(yytext,yyleng);
			  } else {
			      yy_pop_state(); return (VP_DEFARG);
			}}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 235 "../V3PreLex.l"
{ appendDefValue(yytext,yyleng); }  /* defref in defref - outer macro expands first */
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 236 "../V3PreLex.l"
{ appendDefValue(yytext,yyleng); }  /* defref in defref - outer macro expands first */
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 237 "../V3PreLex.l"
{ appendDefValue(yytext,yyleng); }  /* defref in defref - outer macro expands first */
	YY_BREAK
case 95:
#line 239 "../V3PreLex.l"
case 96:
YY_RULE_SETUP
#line 239 "../V3PreLex.l"
{ appendDefValue(yytext,yyleng); }
	YY_BREAK
/* One line comments. */
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 242 "../V3PreLex.l"
{ linenoInc(); yytext=(char*)"\n"; yyleng=1; return (VP_WHITE); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 243 "../V3PreLex.l"
{ yy_push_state(CMTONEM); yymore(); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 244 "../V3PreLex.l"
{ yy_pop_state(); return (VP_COMMENT); }
	YY_BREAK
/* C-style comments. */
/**** See also DEFCMT */
/* We distinguish between the start of a comment, and later, to look for prefix comments (deprecated) */
case 100:
YY_RULE_SETUP
#line 249 "../V3PreLex.l"
{ yy_push_state(CMTMODE); yymore(); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 250 "../V3PreLex.l"
{ yymore(); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 251 "../V3PreLex.l"
{ yy_pop_state(); return(VP_COMMENT); }
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 252 "../V3PreLex.l"
{ linenoInc(); yymore(); }
	YY_BREAK
case YY_STATE_EOF(CMTBEGM):
case YY_STATE_EOF(CMTMODE):
#line 253 "../V3PreLex.l"
{ yyerrorf("EOF in '/* ... */' block comment\n"); yyleng=0; yyterminate(); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 254 "../V3PreLex.l"
{ yymore(); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 255 "../V3PreLex.l"
{ BEGIN CMTMODE; yymore(); }	/* beginning in comment */
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 256 "../V3PreLex.l"
{ yymore(); }
	YY_BREAK
/* Define calls */
/* symbdef prevents normal lex rules from making `\`"foo a symbol {`"foo} instead of a BACKQUOTE */
case 107:
YY_RULE_SETUP
#line 260 "../V3PreLex.l"
{ return (VP_DEFREF); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 261 "../V3PreLex.l"
{ yyleng-=2; return (VP_DEFREF_JOIN); }
	YY_BREAK
/* Generics */
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 264 "../V3PreLex.l"
{ linenoInc(); yytext=(char*)"\n"; yyleng=1; return(VP_WHITE); }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 265 "../V3PreLex.l"
{ yyterminate(); }  /* A "normal" EOF */
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 266 "../V3PreLex.l"
{ return (VP_SYMBOL); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 267 "../V3PreLex.l"
{ yyleng-=2; return (VP_SYMBOL_JOIN); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 268 "../V3PreLex.l"
{ yyleng-=2; return (VP_JOIN); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 269 "../V3PreLex.l"
{ return (VP_WHITE); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 270 "../V3PreLex.l"
{ }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 271 "../V3PreLex.l"
{ }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 272 "../V3PreLex.l"
{ return (VP_TEXT); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 273 "../V3PreLex.l"
ECHO;
	YY_BREAK
#line 2299 "V3PreLex_pregen.yy.cpp"
case YY_STATE_EOF(CMTONEM):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
/* %endif */
/* %if-c++-only */
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( (int)number_to_move == (int)YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
    static yy_state_type yy_get_previous_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 365 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 365 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 364);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */

    static void yyunput (int c, char * yy_bp )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */

/* %endif */
#endif

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
/* %endif */
/* %if-c++-only */
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

/* %if-c-only */
	b->yy_input_file = file;
/* %endif */
/* %if-c++-only */
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
void yypop_buffer_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

/* %if-c-only */
    static void yy_push_state (int  _new_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

/* %if-c-only */
    static void yy_pop_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
    static int yy_top_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/* %if-reentrant */
/* %endif */

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree( (yy_start_stack)  );
        (yy_start_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

/* %if-reentrant */
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 273 "../V3PreLex.l"


void V3PreLex::pushStateDefArg(int level) {
    // Enter define substitution argument state
    yy_push_state(ARGMODE);
    m_parenLevel = level;
    m_defValue = "";
}

void V3PreLex::pushStateDefForm() {
    // Enter define formal arguments state
    yy_push_state(DEFFPAR);  // First is an optional ( to begin args
    m_parenLevel = 0;
    m_defValue = "";
}

void V3PreLex::pushStateDefValue() {
    // Enter define value state
    yy_push_state(DEFVAL);
    m_parenLevel = 0;
    m_defValue = "";
}

void V3PreLex::pushStateIncFilename() {
    // Enter include <> filename state
    yy_push_state(INCMODE);
    yymore();
}

void V3PreLex::debug(int level) { yy_flex_debug=level; }
int V3PreLex::debug() { return yy_flex_debug; }

int V3PreLex::lex() {
    V3PreLex::s_currentLexp = this;  // Tell parser where to get/put data
    m_tokFilelinep = curFilelinep();  // Remember token start location, may be updated by the lexer later
    return yylex();
}

size_t V3PreLex::inputToLex(char* buf, size_t max_size) {
    // We need a custom YY_INPUT because we can't use flex buffers.
    // Flex buffers are limited to 2GB, and we can't chop into 2G pieces
    // because buffers can't end in the middle of tokens.
    // Note if we switched streams here (which we don't) "buf" would be
    // become a stale invalid pointer.
    //
    VPreStream* streamp = curStreamp();
    if (debug()>=10) { cout<<"-  pp:inputToLex ITL s="<<max_size<<" bs="<<streamp->m_buffers.size()<<endl;  dumpStack(); }
    // For testing, use really small chunks
    //if (max_size > 13) max_size=13;
  again:
    size_t got = 0;
    // Get from this stream
    while (got < max_size	// Haven't got enough
	   && !streamp->m_buffers.empty()) {	// And something buffered
	string front = curStreamp()->m_buffers.front(); streamp->m_buffers.pop_front();
	size_t len = front.length();
	if (len > (max_size-got)) {  // Front string too big
	    len = (max_size-got);
	    string remainder = front.substr(len);
	    front = front.substr(0, len);
	    streamp->m_buffers.push_front(remainder);  // Put back remainder for next time
	}
	strncpy(buf+got, front.c_str(), len);
	got += len;
    }
    if (!got) { // end of stream; try "above" file
	bool again=false;
	string forceOut = endOfStream(again/*ref*/);
	streamp = curStreamp();  // May have been updated
	if (forceOut != "") {
	    if (forceOut.length() > max_size) {
		yyerrorf("Output buffer too small for a `line");
	    } else {
		got = forceOut.length();
		strncpy(buf, forceOut.c_str(), got);
	    }
	} else {
	    if (streamp->m_eof) {
		if (yy_flex_debug) cout<<"-  EOF\n";
	    }
	    got = 0;  // 0=EOF/EOS - although got was already 0.
	    if (again) goto again;
	}
    }
    if (debug()>=10) { cout<<"-  pp::inputToLex  got="<<got<<" '"<<string(buf,got)<<"'"<<endl; }
    return got;
}

string V3PreLex::endOfStream(bool& againr) {
    // Switch to file or next unputString
    againr = false;
    if (yy_flex_debug) cout<<"-EOS state="<<curStreamp()->m_termState<<" at "<<curFilelinep()<<endl;
    if (curStreamp()->m_eof) return "";   // Don't delete the final "EOF" stream
    bool exited_file = curStreamp()->m_file;
    if (!exited_file) {
	// Midpoint of stream, just change buffers
	delete curStreamp();
	m_streampStack.pop();  // Must work as size>1; EOF is entry 0
	againr = true;
	return "";
    }
    // Multiple steps because we need FLEX to see ending \n and EOS to end
    // any illegal states, like an unterminated `protected region
    else if (!curStreamp()->m_termState) {
	// First shutdown phase for a file
	// Terminate all files with a newline.  This prevents problems if
	// the user had a define without a terminating newline,
	// otherwise the resumed file's next line would get tacked on.
	// Also makes it likely the `line that changes files comes out
	// immediately.
	curStreamp()->m_termState = 1;
	return "\n";  // Exit old file
    }
    else if (curStreamp()->m_termState == 1) {
	// Now the EOF - can't be sent with other characters
	curStreamp()->m_termState = 2;
	return "";  // End of file
    }
    else if (curStreamp()->m_termState == 2) {
	// Now ending `line
	curStreamp()->m_termState = 3;
	return curFilelinep()->lineDirectiveStrg(2);  // Exit old file
    }
    else {
	// Final shutdown phase for a stream, we can finally change the
	// current fileline to the new stream
	curStreamp()->m_termState = 0;
	FileLine* filelinep = curFilelinep();
	delete curStreamp();
	m_streampStack.pop();  // Must work as size>1; EOF is entry 0
	if (curStreamp()->m_eof) {
	    // EOF doesn't have a "real" fileline, but a linenumber of 0 from init time
	    // Inherit whatever we last parsed so it's more obvious.
	    curFilelinep(filelinep);
	}
	// The caller parser remembered the start location for the text we are parsing,
	// but we've discovered there was a file switch along the way, so update it.
	m_tokFilelinep = curFilelinep();
	//
	if (curStreamp()->m_eof) {
	    return "";
	} else {
	    return curFilelinep()->lineDirectiveStrg(0);  // Reenter resumed file
	}
    }
}

void V3PreLex::initFirstBuffer(FileLine* filelinep) {
    // Called from constructor to make first buffer
    // yy_create_buffer also sets yy_fill_buffer=1 so reads from YY_INPUT
    VPreStream* streamp = new VPreStream(filelinep, this);
    streamp->m_eof = true;
    m_streampStack.push(streamp);
    //
    m_bufferState = yy_create_buffer(NULL, YY_BUF_SIZE);
    yy_switch_to_buffer(m_bufferState);
    yyrestart(NULL);
}

void V3PreLex::scanNewFile(FileLine* filelinep) {
    // Called on new open file.  scanBytesBack will be called next.
    if (streamDepth() > V3PreProc::DEFINE_RECURSION_LEVEL_MAX) {
	// The recursive `include in VPreProcImp should trigger first
	yyerrorf("Recursive `define or other nested inclusion");
	curStreamp()->m_eof = true;  // Fake it to stop recursion
    } else {
	VPreStream* streamp = new VPreStream(filelinep, this);
	m_tokFilelinep = curFilelinep();
	streamp->m_file = true;
	scanSwitchStream(streamp);
    }
}

void V3PreLex::scanBytes(const string& str) {
    // Note buffers also appended in ::scanBytesBack
    // Not "m_buffers.push_front(string(strp,len))" as we need a `define
    // to take effect immediately, in the middle of the current buffer
    // Also we don't use scan_bytes that would set yy_fill_buffer
    // which would force Flex to bypass our YY_INPUT routine.
    if (streamDepth() > V3PreProc::DEFINE_RECURSION_LEVEL_MAX) {
	// More streams if recursive `define with complex insertion
	// More buffers mostly if something internal goes funky
	yyerrorf("Recursive `define or other nested inclusion");
	curStreamp()->m_eof = true;  // Fake it to stop recursion
    } else {
	VPreStream* streamp = new VPreStream(curFilelinep(), this);
	streamp->m_buffers.push_front(str);
	scanSwitchStream(streamp);
    }
}

void V3PreLex::scanSwitchStream(VPreStream* streamp) {
    curStreamp()->m_buffers.push_front(currentUnreadChars());
    m_streampStack.push(streamp);
    yyrestart(NULL);
}

void V3PreLex::scanBytesBack(const string& str) {
    // Initial creation, that will pull from YY_INPUT==inputToLex
    // Note buffers also appended in ::scanBytes
    if (curStreamp()->m_eof) yyerrorf("scanBytesBack without being under scanNewFile");
    curStreamp()->m_buffers.push_back(str);
}

string V3PreLex::currentUnreadChars() {
    // WARNING - Peeking at internals
    ssize_t left = (yy_n_chars - (yy_c_buf_p -currentBuffer()->yy_ch_buf));
    if (left > 0) {  // left may be -1 at EOS
	*(yy_c_buf_p) = (yy_hold_char);
	return string(yy_c_buf_p, left);
    } else {
	return "";
    }
}

YY_BUFFER_STATE V3PreLex::currentBuffer() {
    return YY_CURRENT_BUFFER;
}

int V3PreLex::currentStartState() const {
    return YY_START;
}

void V3PreLex::lineDirective(const char* textp) {
    curFilelinep()->lineDirective(textp, m_enterExit/*ref*/);
    // Make sure we have a dependency on whatever file was specified
    V3File::addSrcDepend(curFilelinep()->filename());
}

void V3PreLex::dumpSummary() {
    cout<<"-  pp::dumpSummary  curBuf="<<(void*)(currentBuffer());
#ifdef FLEX_DEBUG  // Else peeking at internals may cause portability issues
    ssize_t left = (yy_n_chars
		    - (yy_c_buf_p
		       -currentBuffer()->yy_ch_buf));
    cout<<" left="<<dec<<left;
#endif
    cout<<endl;
}

void V3PreLex::dumpStack() {
    // For debug use
    dumpSummary();
    stack<VPreStream*> tmpstack = LEXP->m_streampStack;
    while (!tmpstack.empty()) {
	VPreStream* streamp = tmpstack.top();
	cout<<"-    bufferStack["<<(void*)(streamp)<<"]: "
	    <<" at="<<streamp->m_curFilelinep
	    <<" nBuf="<<streamp->m_buffers.size()
	    <<" size0="<<(streamp->m_buffers.empty() ? 0 : streamp->m_buffers.front().length())
	    <<(streamp->m_eof?" [EOF]":"")
	    <<(streamp->m_file?" [FILE]":"");
	cout<<endl;
	tmpstack.pop();
    }
}

string V3PreLex::cleanDbgStrg(const string& in) {
    string out = in;
    string::size_type pos;
    while ((pos=out.find("\n")) != string::npos) { out.replace(pos, 1, "\\n"); }
    while ((pos=out.find("\r")) != string::npos) { out.replace(pos, 1, "\\r"); }
    return out;
}

void V3PreLex::unused() {
    if (0) {
	// Prevent unused warnings
	yy_top_state();
	yyerror((char*)"");
    }
}

/*###################################################################
 * Local Variables:
 * mode: C++
 * End:
 */

